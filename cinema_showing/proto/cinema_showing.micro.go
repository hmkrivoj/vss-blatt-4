// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cinema_showing.proto

package cinema_showing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CinemaShowingService service

type CinemaShowingService interface {
	Create(ctx context.Context, in *CreateCinemaShowingRequest, opts ...client.CallOption) (*CreateCinemaShowingResponse, error)
	Delete(ctx context.Context, in *DeleteCinemaShowingRequest, opts ...client.CallOption) (*DeleteCinemaShowingResponse, error)
	FindAll(ctx context.Context, in *FindAllCinemaShowingsRequest, opts ...client.CallOption) (*FindAllCinemaShowingsResponse, error)
	Find(ctx context.Context, in *FindCinemaShowingRequest, opts ...client.CallOption) (*FindCinemaShowingResponse, error)
}

type cinemaShowingService struct {
	c    client.Client
	name string
}

func NewCinemaShowingService(name string, c client.Client) CinemaShowingService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cinemashowingservice"
	}
	return &cinemaShowingService{
		c:    c,
		name: name,
	}
}

func (c *cinemaShowingService) Create(ctx context.Context, in *CreateCinemaShowingRequest, opts ...client.CallOption) (*CreateCinemaShowingResponse, error) {
	req := c.c.NewRequest(c.name, "CinemaShowingService.Create", in)
	out := new(CreateCinemaShowingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaShowingService) Delete(ctx context.Context, in *DeleteCinemaShowingRequest, opts ...client.CallOption) (*DeleteCinemaShowingResponse, error) {
	req := c.c.NewRequest(c.name, "CinemaShowingService.Delete", in)
	out := new(DeleteCinemaShowingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaShowingService) FindAll(ctx context.Context, in *FindAllCinemaShowingsRequest, opts ...client.CallOption) (*FindAllCinemaShowingsResponse, error) {
	req := c.c.NewRequest(c.name, "CinemaShowingService.FindAll", in)
	out := new(FindAllCinemaShowingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaShowingService) Find(ctx context.Context, in *FindCinemaShowingRequest, opts ...client.CallOption) (*FindCinemaShowingResponse, error) {
	req := c.c.NewRequest(c.name, "CinemaShowingService.Find", in)
	out := new(FindCinemaShowingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CinemaShowingService service

type CinemaShowingServiceHandler interface {
	Create(context.Context, *CreateCinemaShowingRequest, *CreateCinemaShowingResponse) error
	Delete(context.Context, *DeleteCinemaShowingRequest, *DeleteCinemaShowingResponse) error
	FindAll(context.Context, *FindAllCinemaShowingsRequest, *FindAllCinemaShowingsResponse) error
	Find(context.Context, *FindCinemaShowingRequest, *FindCinemaShowingResponse) error
}

func RegisterCinemaShowingServiceHandler(s server.Server, hdlr CinemaShowingServiceHandler, opts ...server.HandlerOption) error {
	type cinemaShowingService interface {
		Create(ctx context.Context, in *CreateCinemaShowingRequest, out *CreateCinemaShowingResponse) error
		Delete(ctx context.Context, in *DeleteCinemaShowingRequest, out *DeleteCinemaShowingResponse) error
		FindAll(ctx context.Context, in *FindAllCinemaShowingsRequest, out *FindAllCinemaShowingsResponse) error
		Find(ctx context.Context, in *FindCinemaShowingRequest, out *FindCinemaShowingResponse) error
	}
	type CinemaShowingService struct {
		cinemaShowingService
	}
	h := &cinemaShowingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CinemaShowingService{h}, opts...))
}

type cinemaShowingServiceHandler struct {
	CinemaShowingServiceHandler
}

func (h *cinemaShowingServiceHandler) Create(ctx context.Context, in *CreateCinemaShowingRequest, out *CreateCinemaShowingResponse) error {
	return h.CinemaShowingServiceHandler.Create(ctx, in, out)
}

func (h *cinemaShowingServiceHandler) Delete(ctx context.Context, in *DeleteCinemaShowingRequest, out *DeleteCinemaShowingResponse) error {
	return h.CinemaShowingServiceHandler.Delete(ctx, in, out)
}

func (h *cinemaShowingServiceHandler) FindAll(ctx context.Context, in *FindAllCinemaShowingsRequest, out *FindAllCinemaShowingsResponse) error {
	return h.CinemaShowingServiceHandler.FindAll(ctx, in, out)
}

func (h *cinemaShowingServiceHandler) Find(ctx context.Context, in *FindCinemaShowingRequest, out *FindCinemaShowingResponse) error {
	return h.CinemaShowingServiceHandler.Find(ctx, in, out)
}
