// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cinema_hall.proto

package cinema_hall

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CinemaHallService service

type CinemaHallService interface {
	Create(ctx context.Context, in *CreateCinemaHallRequest, opts ...client.CallOption) (*CreateCinemaHallResponse, error)
	Delete(ctx context.Context, in *DeleteCinemaHallRequest, opts ...client.CallOption) (*DeleteCinemaHallResponse, error)
	FindAll(ctx context.Context, in *FindAllCinemaHallsRequest, opts ...client.CallOption) (*FindAllCinemaHallsResponse, error)
}

type cinemaHallService struct {
	c    client.Client
	name string
}

func NewCinemaHallService(name string, c client.Client) CinemaHallService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cinemahallservice"
	}
	return &cinemaHallService{
		c:    c,
		name: name,
	}
}

func (c *cinemaHallService) Create(ctx context.Context, in *CreateCinemaHallRequest, opts ...client.CallOption) (*CreateCinemaHallResponse, error) {
	req := c.c.NewRequest(c.name, "CinemaHallService.Create", in)
	out := new(CreateCinemaHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaHallService) Delete(ctx context.Context, in *DeleteCinemaHallRequest, opts ...client.CallOption) (*DeleteCinemaHallResponse, error) {
	req := c.c.NewRequest(c.name, "CinemaHallService.Delete", in)
	out := new(DeleteCinemaHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaHallService) FindAll(ctx context.Context, in *FindAllCinemaHallsRequest, opts ...client.CallOption) (*FindAllCinemaHallsResponse, error) {
	req := c.c.NewRequest(c.name, "CinemaHallService.FindAll", in)
	out := new(FindAllCinemaHallsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CinemaHallService service

type CinemaHallServiceHandler interface {
	Create(context.Context, *CreateCinemaHallRequest, *CreateCinemaHallResponse) error
	Delete(context.Context, *DeleteCinemaHallRequest, *DeleteCinemaHallResponse) error
	FindAll(context.Context, *FindAllCinemaHallsRequest, *FindAllCinemaHallsResponse) error
}

func RegisterCinemaHallServiceHandler(s server.Server, hdlr CinemaHallServiceHandler, opts ...server.HandlerOption) error {
	type cinemaHallService interface {
		Create(ctx context.Context, in *CreateCinemaHallRequest, out *CreateCinemaHallResponse) error
		Delete(ctx context.Context, in *DeleteCinemaHallRequest, out *DeleteCinemaHallResponse) error
		FindAll(ctx context.Context, in *FindAllCinemaHallsRequest, out *FindAllCinemaHallsResponse) error
	}
	type CinemaHallService struct {
		cinemaHallService
	}
	h := &cinemaHallServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CinemaHallService{h}, opts...))
}

type cinemaHallServiceHandler struct {
	CinemaHallServiceHandler
}

func (h *cinemaHallServiceHandler) Create(ctx context.Context, in *CreateCinemaHallRequest, out *CreateCinemaHallResponse) error {
	return h.CinemaHallServiceHandler.Create(ctx, in, out)
}

func (h *cinemaHallServiceHandler) Delete(ctx context.Context, in *DeleteCinemaHallRequest, out *DeleteCinemaHallResponse) error {
	return h.CinemaHallServiceHandler.Delete(ctx, in, out)
}

func (h *cinemaHallServiceHandler) FindAll(ctx context.Context, in *FindAllCinemaHallsRequest, out *FindAllCinemaHallsResponse) error {
	return h.CinemaHallServiceHandler.FindAll(ctx, in, out)
}
